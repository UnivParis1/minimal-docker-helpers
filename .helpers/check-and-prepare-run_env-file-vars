#!/usr/bin/perl -w
use strict;

my $only_image = $ARGV[0] eq '--only-image' && shift;

my ($run_env_file) = @ARGV or die "usage: $ARGV .../run.env\n";

open(my $F, '<', $run_env_file) or die;
while (<$F>) {
    chomp;
    if (/^\s*#/ || /^\s*$/) {
        # on ignore
    } elsif (m!^image=([\w:./-]+)$!) {
        if (!$only_image) {
            print 'if [ -n "$image" ]; then ' . echo_error('"image=" ne doit pas utilisé quand on utilise Dockerfile') . "; fi;\n";
        }
        print "image='$1';\n";
    } elsif ($only_image) {
        # on ignore
    } elsif ($ENV{base_dir} && m!^rw_vol=([\w./-]+)$!) {
        my $mountpoint = $1;
        check_canonicalized($mountpoint);
        $mountpoint eq $ENV{base_dir} || startsWith($mountpoint, "$ENV{base_dir}/")
            or fatal("rw_vol=$mountpoint n'est pas autorisé. Il faut $ENV{base_dir} ou un de ses sous-répertoires");
        -e $mountpoint
            or fatal("$mountpoint n'existe pas");
        !$ENV{user} || file_owner($mountpoint) eq $ENV{user}
            or fatal("$mountpoint doit appartenir à l'utilisateur $ENV{user}");
        print qq(rw_vols="\$rw_vols $mountpoint";\n);
    } elsif (/^(maxPostSize|maxParameterCount|maxActiveSessionsGoal)=(-?\d+)$/ ||
             /^(remoteIpInternalProxies)=([\d:.\[\]\(\)\|]+)$/ ||
             /^(use_http_proxy_via)=(env)$/ ||
             /^(use_http_proxy_for)=(java|maven)$/) {
        print "$1='$2';\n";
    } elsif (m!^(subdir)=([\w./-]+)$!) {
        $ENV{action} eq 'runOnce' or fatal("$1 only allowed in runOnce.env");
        print "$1='$2';\n";
    } else {
        fatal("invalid line « $_ »");
    }
}

sub echo_error {
    my ($msg) = @_;
    $msg =~ s/'/'"'"'/g;
    # will be interpreted by caller which is a shell
    "echo 'ERROR $run_env_file: $msg'; exit 1";
}

sub fatal {
    print echo_error($_[0]), "\n";
    exit 1;
}
sub startsWith {
    my ($string, $prefix) = @_;
    rindex($string, $prefix, 0) == 0
}
sub canonicalize {
    my ($d) = @_;
    my $d2 = `readlink -f "$d"`;
    chomp $d2;
    $d2;
}
sub check_canonicalized {
    my ($d) = @_;
    my $d2 = canonicalize($d);
    $d eq $d2 or fatal("$d n'est pas canonifié. Mettre $d2");
}
sub file_owner {
    getpwuid((stat($_[0]))[4])
}