#!/usr/bin/perl -w

use strict;

my %c = (
    RED    => "\033[0;31m",
    LRED   => "\033[1;31m",
    YELLOW => "\033[1;33m",
    LGREEN => "\033[1;32m",
    GREEN  => "\033[0;32m",
    CYAN   => "\033[1;36m",
    WHITE  => "\033[1;37m",
    LBLUE  => "\033[1;34m",
    LPURPLE => "\033[1;35m",
    GRAY => "\033[0;37m",
    DEFAULT => "\033[0;37m",
    NC => "\033[0m",
);
my $color_on = -t STDOUT;

my @lst_files = (
    glob("/opt/dockers/.helpers/host-pkgs/*.lst"),
    grep { -e $_ } map { "$_/host-pkgs.lst" } grep { ! -e "$_/IGNORE" } glob("/opt/dockers/*")
);


my @raw_conf;
my %known;
foreach my $file (@lst_files) {
    my $comment = '';
    foreach (`cat $file`) {
        if (/^\s*$/) {
            # ignore
        } elsif (/^#\s*(.*)/) {
            $comment = $1;
        } else {
            if (my ($app_name) = $file =~ m!([^/]*)/host-pkgs.lst$!) {
                $comment =~ s/^pour //;
                $comment = "pour $app_name" . ($comment ? " : $comment" : '');
            }
            my @pkgs = split(/\s+/, $_);
            push @{$known{$_}}, $comment foreach @pkgs;
            push @raw_conf, [ $comment, @pkgs ];
            $comment = '';
        }
    }
}

my %conf;
my @comments; # pour l'ordre
sub add {
    my ($comment, @pkgs) = @_;
    if (@pkgs) {
        push @comments, $comment if !$conf{$comment};
        push @{$conf{$comment}}, array_diff(\@pkgs, $conf{$comment});
    }
}
foreach my $one_conf (@raw_conf) {
    my ($comment, @pkgs) = @$one_conf;
    add($comment, grep { @{$known{$_}} == 1 } @pkgs);
    foreach my $pkg (@pkgs) {
        my @comments = @{$known{$pkg}};
        if (@comments > 1) {
            add(join(" ET ", @comments), $pkg);
        }
    }
}

my %installed = map { 
    s/:amd64//; # nécessaire sur une machine qui doit être biarch ?
    /(\S+)\s+install$/ ? ($1 => 1) : () 
} `dpkg --get-selections`;
my @manual = split(/\s/, `apt-mark showmanual`);
my %manual = map { $_ => 1 } @manual;

foreach my $comment (@comments) {
    display('GREEN', $comment, map { 
        my $color = $manual{$_} ? 'LGREEN' : $comment =~ /IGNORE_NON_INSTALLED/ ? 'GRAY' : $installed{$_} ? 'RED' : 'YELLOW';
        colored($color, $_) . ($color eq 'YELLOW' ? "(non installé)" : $color eq 'RED' ? "(marqué auto)" : '')
    } @{$conf{$comment}});
}

my @unknown = grep { !$known{$_} } @manual;

if (@unknown) {
   display("LRED", "paquets inconnus :", grep { !/^lib/ } @unknown);
   display("RED", "paquets inconnus (libs) :", grep { /^lib/ } @unknown);
} else {
   display_comment("aucun autres paquets");
}

sub colored {
    my ($color, $txt) = @_;
    $c{$color} or die "unknown color $color";
    $color_on ? $c{$color} . $txt . $c{NC} : $txt
}
sub display_comment {
    my ($msg) = @_;
    print colored('LBLUE', "# $msg"), "\n";
}
sub display {
    my ($color, $msg, @pkgs) = @_;
    if (@pkgs) {
        display_comment($msg);
        print colored($color, join(" ", @pkgs)), "\n";
    }
}

sub array_diff {
    my ($a1, $a2) = @_;
    my %a2 = map { $_ => 1 } @$a2;
    grep { !$a2{$_} } @$a1
}
